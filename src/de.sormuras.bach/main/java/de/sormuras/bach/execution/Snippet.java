/*
 * Bach - Java Shell Builder
 * Copyright (C) 2020 Christian Stein
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package de.sormuras.bach.execution;

import java.time.Instant;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

/** Source code lines. */
public /*static*/ final class Snippet {

  /** Return new snippet for the given source code lines. */
  public static Snippet of(String... lines) {
    return new Snippet(Set.of(), List.of(lines));
  }

  /** Return new snippet merged from all given snippets. */
  public static Snippet of(List<Snippet> snippets) {
    if (snippets.isEmpty()) return Snippet.of();
    if (snippets.size() == 1) return snippets.get(0);
    var types = new HashSet<Class<?>>();
    var lines = new ArrayList<String>();
    for(var snippet : snippets) {
      types.addAll(snippet.types());
      lines.addAll(snippet.lines());
    }
    return new Snippet(types, lines);
  }

  /** Create program source lines for the given task. */
  public static List<String> program(Task root) {
    var snippets = new ArrayList<Snippet>();
    root.walk(task -> snippets.add(task.toSnippet()));
    var snippet = of(snippets);
    var program = new ArrayList<String>();
    program.add("//usr/bin/env java \"$0\" \"$@\"; exit $?");
    program.add("// Build program generated by Bach.java on " + Instant.now());
    snippet.types().stream()
        .map(Class::getCanonicalName)
        .sorted()
        .forEach(type -> program.add("import " + type + ";"));
    program.add("class Build {");
    program.add("  public static void main(String... args) throws Exception {");
    snippet.lines().forEach(line -> program.add("    " + line));
    program.add("  }");
    program.add("  static void run(String name, String... args) {");
    program.add("    var tool = java.util.spi.ToolProvider.findFirst(name).orElseThrow();");
    program.add("    System.out.println('\\n' + name + ' ' + String.join(\" \", args));");
    program.add("    tool.run(System.out, System.err, args);");
    program.add("  }");
    program.add("}");
    return program;
  }

  private final Set<Class<?>> types;
  private final List<String> lines;

  public Snippet(Set<Class<?>> types, List<String> lines) {
    this.types = types;
    this.lines = lines;
  }

  public Set<Class<?>> types() {
    return types;
  }

  public List<String> lines() {
    return lines;
  }
}
